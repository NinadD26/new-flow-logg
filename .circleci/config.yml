version: 2.1

jobs:
  plan-apply:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: Install AWS CLI
          command: |
            apt-get update && apt-get install -y unzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
      - run:
          name: Configure AWS SSO
          command: |
            aws configure set region us-east-1
            aws configure sso --profile SandoxTeamA
      - run:
          name: terraform init & plan
          command: |
            terraform init -input=false
            terraform plan
      - persist_to_workspace:
          root: .
          paths:
            - .

  apply:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI
          command: |
            apt-get update && apt-get install -y unzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
      - run:
          name: Configure AWS SSO
          command: |
            aws configure set region us-east-1
            aws configure sso --profile SandoxTeamA
      - run:
          name: terraform apply
          command: |
            terraform apply -auto-approve -var-file="terraform.tfvars"
      - persist_to_workspace:
          root: .
          paths:
            - .

workflows:
  build_now:
    jobs:
      - plan-apply
      - apply









# version: 2.1

# executors:
#   terraform:
#     docker:
#       - image: hashicorp/terraform:latest
#     working_directory: ~/project

# jobs:
#   plan:
#     executor: terraform
#     steps:
#       - checkout
#       - run:
#           name: Install Dependencies
#           command: |
#             apk add --no-cache python3 py3-pip
#             pip3 install awscli
#       - run:
#           name: Configure AWS Credentials
#           command: |
#             mkdir -p ~/.aws
#             echo "[default]" > ~/.aws/credentials
#             echo "aws_access_key_id = ${AWS_ACCESS_KEY_ID}" >> ~/.aws/credentials
#             echo "aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentials
#             echo "[default]" > ~/.aws/config
#             echo "region = ${AWS_DEFAULT_REGION}" >> ~/.aws/config
#             echo "output = json" >> ~/.aws/config
#       - run:
#           name: Initialize Terraform
#           command: terraform init
#       - run:
#           name: Terraform Plan
#           command: terraform plan -var "aws_region=${AWS_DEFAULT_REGION}"

#   apply:
#     executor: terraform
#     steps:
#       - checkout
#       - run:
#           name: Install Dependencies
#           command: |
#             apk add --no-cache python3 py3-pip
#             pip3 install awscli
#       - run:
#           name: Configure AWS Credentials
#           command: |
#             mkdir -p ~/.aws
#             echo "[default]" > ~/.aws/credentials
#             echo "aws_access_key_id = ${AWS_ACCESS_KEY_ID}" >> ~/.aws/credentials
#             echo "aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentials
#             echo "[default]" > ~/.aws/config
#             echo "region = ${AWS_DEFAULT_REGION}" >> ~/.aws/config
#             echo "output = json" >> ~/.aws/config
#       - run:
#           name: Initialize Terraform
#           command: terraform init
#       - run:
#           name: Terraform Apply
#           command: terraform apply -var "aws_region=${AWS_DEFAULT_REGION}" -auto-approve

# workflows:
#   version: 2
#   terraform:
#     jobs:
#       - plan
#       - apply:
#           requires:
#             - plan
#           filters:
#             branches:
#               only: main






#******************************clam av


# version: 2.1
# jobs:
#   plan-apply:
#     working_directory: /tmp/project
#     docker:
#       - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
#     steps:
#       - checkout
#       - run:
#           name: Configure AWS CLI
#           command: |
#             aws configure set aws_access_key_id ${AWS_ACCESS_KEY}
#             aws configure set aws_secret_access_key ${AWS_SECRET_KEY}
#             aws configure set region us-east-1
#             aws configure set output json
#       - run:
#           name: terraform init & plan
#           command: |
#             terraform init -input=false
#             terraform plan 
#       - persist_to_workspace:
#           root: .
#           paths:
#             - .

#   apply:
#     docker:
#       - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
#     steps:
#       - attach_workspace:
#           at: .
#       - run:
#           name: terraform
#           command: |
#             terraform apply -auto-approve
#       - persist_to_workspace:
#           root: .
#           paths:
#             - .

#   plan-destroy:
#     docker:
#       - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
#     steps:
#       - attach_workspace:
#           at: .
#       - run:
#           name: terraform create destroy plan
#           command: |
#             terraform plan -destroy 
#       - persist_to_workspace:
#           root: .
#           paths:
#             - .

#   destroy:
#     docker:
#       - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
#     steps:
#       - attach_workspace:
#           at: .
#       - run:
#           name: terraform destroy
#           command: |
#             terraform apply -auto-approve 
# workflows:
#   version: 2
#   plan_approve_apply:
#     jobs:
#       - plan-apply
#       - hold-apply:
#           type: approval
#           requires:
#             - plan-apply
#       - apply:
#           requires:
#             - hold-apply
#       - plan-destroy:
#           requires:
#             - apply
#       - hold-destroy:
#           type: approval
#           requires:
#             - plan-destroy
#       - destroy:
#           requires:
#             - hold-destroy
